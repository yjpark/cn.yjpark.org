<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on YJ Park 之程序人生</title>
    <link>http://cn.yjpark.org/post/index.xml</link>
    <description>Recent content in Post-rsses on YJ Park 之程序人生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>yjpark@gmail.com (YJ Park)</managingEditor>
    <webMaster>yjpark@gmail.com (YJ Park)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Mon, 23 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://cn.yjpark.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Elm 中使用子模块的一种方法</title>
      <link>http://cn.yjpark.org/blog/2017/01/23/elm-use-sub-module/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://cn.yjpark.org/blog/2017/01/23/elm-use-sub-module/</guid>
      <description>&lt;h2 id=&#34;为什么需要引入子模块&#34;&gt;为什么需要引入子模块？&lt;/h2&gt;

&lt;p&gt;随着代码量的增加，相关逻辑日渐复杂，需要维护的状态和传递的消息也迅速的增加起来。&lt;/p&gt;

&lt;p&gt;Elm 的架构文档中并没有详细说明如何组织比较复杂的项目，我调查中看到的文章中的方案也大多仍然需要模块间的耦合，实际使用中并不能得到满意的效果。&lt;/p&gt;

&lt;h2 id=&#34;期望达到的效果&#34;&gt;期望达到的效果&lt;/h2&gt;

&lt;p&gt;首先需要做到的是代码层面的分离，模块内部实现细节的修改对外部来说尽量不可见，减少代码的耦合程度，便于开发。&lt;/p&gt;

&lt;p&gt;下一个阶段的目标是模块的可重用性，除了简单的函数层面的重用，在更高层次上也有很多相似性，例如如果由于应用场景的考虑，需要发布多个微信小程序的话，其中有不少逻辑是可以共用的，例如微信端用户登录、信息获取，服务后台的 Session 管理，等等。&lt;/p&gt;

&lt;p&gt;模块之间的交互应尽量简单，可以用可维护的方式进行组织。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;如何拆分子模块&#34;&gt;如何拆分子模块&lt;/h2&gt;

&lt;p&gt;个人的习惯是先从数据开始设计，在 Model 的部分先做分割，之后进行 Msg 的设计，宗旨是把聚合度高的部分放在一起，封装成独立的模块。&lt;/p&gt;

&lt;h2 id=&#34;子模块间如何交互&#34;&gt;子模块间如何交互&lt;/h2&gt;

&lt;p&gt;多个模块需要彼此协调才能完成完整的应用逻辑，根据具体情况有以下的情境&lt;/p&gt;

&lt;h3 id=&#34;数据依赖&#34;&gt;数据依赖&lt;/h3&gt;

&lt;p&gt;某个模块需要外部提供所需的数据，有几种处理的方法，可以根据具体需要进行选择&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;作为输入事件的参数传递进来，只在相关事件的处理中使用&lt;/li&gt;
&lt;li&gt;封装成内部的数据，加入 Model，在需要时访问&lt;/li&gt;
&lt;li&gt;作为 update 方法的参数，每次更新时都可以访问到&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;事件触发&#34;&gt;事件触发&lt;/h3&gt;

&lt;p&gt;对于子模块来说，其实不用了解事件的具体来源，可以是模块自身，可以是其它模块，或是应用层面的用户输入。只要把自身的生命周期管理好即可，由于 Elm 架构的函数式和不可变特性，一般来说调试也很方便，只要观察 Msg 的序列以及相应的 Model 的变化往往就能找到问题所在。&lt;/p&gt;

&lt;h2 id=&#34;wxapp-子模块&#34;&gt;WxApp 子模块&lt;/h2&gt;

&lt;p&gt;由于所有的微信小程序都需要进行用户身份的管理，在 elm-wx-app 中提供了一个基本的身份认证子模块，在 API 调用之上提供了更高一层的接口。&lt;/p&gt;

&lt;p&gt;下面列出了部分的代码，结构相对比较简单，感兴趣的话可以 Clone 完整的版本。&lt;/p&gt;

&lt;p&gt;（目前的版本还比较简单，接口也没有完全固定下来）&lt;/p&gt;

&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;type alias Type =
    { systemInfo : SystemInfo.Type
    , userCode : String
    , userInfo : UserInfo.Type
    , userSecret : UserSecret.Type
    , tabs : List UiTab.Type
    , currentTabKey : UiTab.Key
    , pages : List UiPage.Type
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;msg&#34;&gt;Msg&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;type Msg
    = DoInit
    | DoGetSystemInfo
    | DoCheckSession
    | DoLogin
    | DoLoadWxModel
    | DoGetUserInfo
    | GetSystemInfoMsg (Result Error GetSystemInfo.Msg)
    | CheckSessionMsg (Result Error CheckSession.Msg)
    | LoginMsg (Result Error Login.Msg)
    | LoadWxModelMsg (Result Error WxModel.Type)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update&#34;&gt;update&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;update : Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)
update msg model =
    case msg of
        DoInit -&amp;gt;
            ( model
            , cmd DoGetSystemInfo
            )
        DoGetSystemInfo -&amp;gt;
            ( model
            , GetSystemInfo.cmd GetSystemInfoMsg
            )
        DoCheckSession -&amp;gt;
            ( model
            , CheckSession.cmd CheckSessionMsg
            )
        DoLogin -&amp;gt;
            ( model
            , Login.cmd LoginMsg
            )
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wxapp-wrapper-实例分析&#34;&gt;WxApp Wrapper 实例分析&lt;/h2&gt;

&lt;h3 id=&#34;wrapper&#34;&gt;wrapper&lt;/h3&gt;

&lt;p&gt;wrapper 的细节请看 elm-component-updater 的实现代码，基本上是从主模型中访问子模型（get），调用子模块的 update，之后再把返回的子模型更新到主模型中（set）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wrapper : Wrapper Msg Wx.Msg
wrapper =
    wrap WxMod
        { get = Just &amp;lt;&amp;lt; .wx
        , set = \modModel model -&amp;gt; { model | wx = modModel }
        , update = Wx.update
        , react = reaction
        }

cmd msg =
    toCmd msg
        |&amp;gt; Cmd.map wrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;reaction&#34;&gt;reaction&lt;/h3&gt;

&lt;p&gt;reaction 的目的是对于特定的子模块事件产生相应的外部事件，来达到对其他模块的控制。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reaction modMsg modModel model =
    model ! []
        |&amp;gt; case modMsg of
            Wx.PopPageMsg pageKey (Ok _) -&amp;gt;
                case List.length modModel.pages of
                    0 -&amp;gt;
                        addCmd &amp;lt;| cmd &amp;lt;| Wx.SwitchTab &amp;quot;dialogue&amp;quot;
                    _ -&amp;gt;
                        noOperation
            _ -&amp;gt;
                noOperation

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;主应用中的相关代码&#34;&gt;主应用中的相关代码&lt;/h2&gt;

&lt;h3 id=&#34;model-1&#34;&gt;model&lt;/h3&gt;

&lt;p&gt;首先是在 Model 中包含子模块的部分&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type alias Type =
    { rev : Int
    , wx : Wx.Model
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;事件定义&#34;&gt;事件定义&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import Updater
import WxApp.Mod as Wx
type alias Delegate = (Updater Model Msg)

type Msg
    = WxMod Delegate
    | WxMsg Wx.Msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WxMod 代表由 Wrapper 处理的事件，WxMsg 则是普通事件，需要在 update 中转换为 Wrapper 事件。&lt;/p&gt;

&lt;p&gt;这里做区分的原因是在 Elm 中无法循环 import，在被 WxApp Wrapper 引用的代码中如果也需要通知 WxApp 的模块，则只能产生一个 WxMsg 类型的事件。&lt;/p&gt;

&lt;h3 id=&#34;update-1&#34;&gt;update&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import Wrapper.Wx as Wx

updateMod : Msg -&amp;gt; (Model, Cmd Msg) -&amp;gt; (Model, Cmd Msg)
updateMod msg (model, cmd) =
    case msg of
        WxMod delegate -&amp;gt;
            delegate model
        WxMsg msg -&amp;gt;
            (model, Wx.cmd msg)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到这里对于 WxMsg 类型的事件使用 wrapper 做了一次转换，略显繁琐，不确定是否有更好的方式。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;实际开发中应用以上方式写了不少代码，在模块的分隔上感觉还是一种不错的方法。&lt;/p&gt;

&lt;p&gt;在需要调整模块结构的情况下，Elm 作为静态类型语言提供了很大的帮助，编译器可以发现不匹配的接口，重构起来有一气呵成的感觉。&lt;/p&gt;

&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;

&lt;h3 id=&#34;链接&#34;&gt;链接&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guide.elm-lang.org/reuse/checkboxes.html&#34;&gt;Elm: Scaling the Elm Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mpdairy/elm-component-updater&#34;&gt;elm-component-updater&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yjpark/elm-wx-app&#34;&gt;elm-wx-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.brianthicks.com/post/2016/07/05/duplicate-message-or-update-contexts-in-elm-components/&#34;&gt;Duplicate, Message, or Update? Contexts in Elm Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Elm 语言开发微信小程序</title>
      <link>http://cn.yjpark.org/blog/2017/01/15/elm-with-wechat-app/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://cn.yjpark.org/blog/2017/01/15/elm-with-wechat-app/</guid>
      <description>&lt;p&gt;由于工作需要，最近进行了一些目前很热门的微信小程序开发，技术选型的过程和结果都有些值得分享的体会，尝试做个简要的介绍。&lt;/p&gt;

&lt;p&gt;先说结果，核心的逻辑采用了 Elm 语言开发，编译到 JavaScript ，界面显示还是标准的 JavaScript 和 WXML。&lt;/p&gt;

&lt;h2 id=&#34;elm-是什么&#34;&gt;Elm 是什么?&lt;/h2&gt;

&lt;p&gt;官网的简介:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A delightful language for reliable webapps. Generate JavaScript with great performance and no runtime exceptions.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;翻译成中文大约是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;一门开发网页应用的令人愉悦的语言，生成高性能、没有运行时例外的 JavaScript 代码
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;过去两周，写了大约 5000 行的 Elm 代码，感觉上面的描述还是挺靠谱的，和手写 JavaScript 相比，确实令人愉悦。下面简单分析下技术上 Elm 是如何做到的。&lt;/p&gt;

&lt;p&gt;（这篇文章以概念和经验介绍为主，就基本不上代码了，以后尽量有后续的详细介绍）&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;强类型-静态类型的编译语言&#34;&gt;强类型，静态类型的编译语言&lt;/h3&gt;

&lt;p&gt;个人认为这是 Elm 和 JavaScript 最大的区别，JavaScript 不会对代码访问的数据做任何的类型检查，只有实际运行后才知道结果会怎样，可能会出现空指针，未定义变量，数据类型、格式不匹配等等各种问题，而且测试运行通过也不代表今后的运行还是正确的，因为将来的输入数据可能会有变化。&lt;/p&gt;

&lt;p&gt;常见的解决方法有数据检查、代码检查工具（例如 Facebook FlowType）、代码扩展（例如微软的 TypeScript）等等。基本上都是补丁的方式，而且并非强制的，不能彻底解决问题。&lt;/p&gt;

&lt;p&gt;作为编译语言， Elm 需要定义数据、函数的类型（也支持自动类型推定），会在编译时进行检查，只有所有的函数调用完全符合所声明的类型时才能编译通过。而且 Elm 中没有空指针的概念，对于可能为空的情况必须明确声明，并做相应的处理。&lt;/p&gt;

&lt;h3 id=&#34;函数式语言-不可变数据&#34;&gt;函数式语言，不可变数据&lt;/h3&gt;

&lt;p&gt;函数式其实是个历史悠久的概念，不过由于各种历史原因，目前的主流语言大多以面向对象为核心，导致很多人（包括我自己）都对函数式语言不了解，并且常常会有很难学，很难用的印象。数年之前用 XMonad 作为主力窗口管理器（现在偶尔也还会用），配置文件需要用 Haskell 写，在没学语法的情况下参考其他人的例子配了个相当满意的配置，一直想认真学一下，不过一直也没抽出时间来。&lt;/p&gt;

&lt;p&gt;其实如果把对象看成数据结构和操作数据结构的方法的结合，在直观的层面上和函数式的方式并没有本质的区别，像是 C# 里面的 Extension 就是应用了语法糖的方式，伪装成成员方法的外在函数。&lt;/p&gt;

&lt;p&gt;而不可变数据才是让函数式编程截然不同的原因，如果还是以对象的眼光来看待的话，可以理解成每次对于对象的修改都产生了一个独立的新对象，它们之间完全隔离，彼此没有任何影响。随之而来的各种好处是巨大的，例如对于并发的处理，缓存的处理等等。&lt;/p&gt;

&lt;p&gt;另一个重要的特性就是高阶函数、闭包，虽然现在的主流语言基本上也都提供了支持，也很大程度上改善了语言的描述性，但在离开了不可变的情况下，并不能提供同样的强大支持。&lt;/p&gt;

&lt;h3 id=&#34;elm-架构&#34;&gt;Elm 架构&lt;/h3&gt;

&lt;p&gt;Elm 架构是构架在语言层面之上的系统组织形式，也有点像是 Elm 中的入口（main 函数），独到之处在于它是完整的运行周期管理，并且在 Elm 中，似乎没有其它的方式，只能以这一模式运行，貌似很死板，实际用起来还很适用。&lt;/p&gt;

&lt;p&gt;如果你对于 Flux，Redux，有过了解的话，基本上也已经了解 Elm 架构了，它们的设计都受到了 Elm 的很大影响，基于同样的理念。&lt;/p&gt;

&lt;p&gt;为了避免这篇文章太长而无法完成，就不详细介绍了，具体的细节可以参考官方的入门文档。&lt;/p&gt;

&lt;h2 id=&#34;成果与心得&#34;&gt;成果与心得&lt;/h2&gt;

&lt;p&gt;虽然 Evan Czaplicki （Elm 作者）非常强调 Elm 对初学者的友好，也花了不少精力提供了不错的文档和工具，但是真正把一门新语言应用到实际项目中始终都是个挑战，另外微信小程序与标准的 Web 开发也有不少区别，需要额外的时间和精力。&lt;/p&gt;

&lt;p&gt;语法和类库的层面就不提了，语法写习惯了就好，核心的类库还是挺小的，文档也很清晰，就是往往没有明确的示例，需要一些试验才能真正理解，在开发周期比较紧的时候，压力还是很大的。&lt;/p&gt;

&lt;p&gt;不过在这次的经验上，Elm 从入门到达到相对高效的状态比想象的要快，感觉设计思路上非常清晰，对于设计场景很适合。我自身的方面是各方面开发经验和接触过的语言还算多，函数式语言之前有过不到两个月的 Erlang 经验，多年的习惯是 Vim 开发，打日志调试为主，对 IDE 没太大需求。&lt;/p&gt;

&lt;h3 id=&#34;柯里化-currying-以及管道操作符&#34;&gt;柯里化（Currying）以及管道操作符&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;insertInt : String -&amp;gt; Int -&amp;gt; DataDict -&amp;gt; DataDict
insertInt key val =
    Dict.insert key (Json.Encode.int val)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个极其简单的函数的声明，第一行是类型的定义，一堆箭头，让人有点晕，如果描述一下的话，版本 A 是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;insertInt 是一个函数，有一个输入，类型是 String，输出类型是函数 insertInt_A1&lt;/li&gt;
&lt;li&gt;insertInt_A1 也是一个函数，有一个输入，类型是 Int，输出类型是函数 insertInt_A2&lt;/li&gt;
&lt;li&gt;insertInt_A2 还是一个函数，有一个输入，类型是 DataDict，输出类型也是 DataDict&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;type alias Data = Json.Encode.Value
type alias DataDict = (Dict.Dict String Data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DataDict 就是一个字典，键的类型是 String，值的类型是一个 Json 数据&lt;/p&gt;

&lt;p&gt;对于一个所有实现仅有一行的函数来说，还真是显得有点过于复杂了，其实这还不算完，还有版本 B：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;insertInt 是一个函数，有两个输入，类型是 String 和 Int，输出类型是函数 insertInt_B&lt;/li&gt;
&lt;li&gt;insertInt_B 也是一个函数，有一个输入，类型是 DataDict，输出类型也是 DataDict&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;或者是比较容易理解的版本 C：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;insertInt 是一个函数，有三个输入，类型是 String，Int，DataDict，输出类型是DataDict&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么哪个是正确的版本呢，全都是，取决于使用的方式。定义的时候其实也是一样，从代码上看比较像是版本 B，有两个输入参数，而你完全可以用版本 A 或是版本 C 的方式来使用。&lt;/p&gt;

&lt;p&gt;一旦开始用这样的眼光来看待多参数的函数，你会有一种发现了新世界的感觉，函数之间的重用非常方便，而实现起来又极为简单。概念上这是属于所谓&lt;code&gt;柯里化（Currying）&lt;/code&gt;的范畴，使用上需要一些经验的积累，才能达到得心应手的状态。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;encode : Type -&amp;gt; Data
encode info =
    empty
        |&amp;gt; insertString &amp;quot;nickName&amp;quot; info.nickName
        |&amp;gt; insertInt &amp;quot;gender&amp;quot; (Gender.encode info.gender)
        |&amp;gt; insertString &amp;quot;city&amp;quot; info.city
        |&amp;gt; insertString &amp;quot;province&amp;quot; info.province
        |&amp;gt; insertString &amp;quot;country&amp;quot; info.country
        |&amp;gt; insertString &amp;quot;avatarUrl&amp;quot; info.avatarUrl
        |&amp;gt; dictToData
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码是用了上面定义的函数来生成一个 Json 数据的过程，其中的 &lt;code&gt;|&amp;gt;&lt;/code&gt; 表示的是把之前的数据作为后面函数调用的后一个参数，在合适的情境下，会让代码很清晰。&lt;/p&gt;

&lt;p&gt;友情提示：用过 Elixir 的码农注意了，Elixir 的管道符是变成第一个参数的，别弄混了。&lt;/p&gt;

&lt;p&gt;另外，Elm 中还有其它几个特殊符号：&lt;code&gt;&amp;lt;|&lt;/code&gt;，&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;，都很有用，这里就不细说了，当然有时难免还是得加括号的。&lt;/p&gt;

&lt;h3 id=&#34;单一行为的串联&#34;&gt;单一行为的串联&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;update : Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在对于一个事件做处理时，往往需要做多种操作，更新数据，发送新消息，执行外部访问，等等，代码渐渐的就难以清晰的看出其中的意图来了，开始时也困惑了一阵子，后来找到了 elm-update-extra 这个包，一下子就清楚了，其实核心的思想就是引入中间的环节，多个环节就可以连接起来了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;op : (Model, Cmd Msg) -&amp;gt; (Model, Cmd Msg)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
    (updateModel &amp;lt;| SocketModel.setOnline True)
    &amp;gt;&amp;gt; (updateModel &amp;lt;| SocketModel.updateChannel Channel.onJoin)
    &amp;gt;&amp;gt; (addCmd &amp;lt;| toCmd DoJoinChannel topic res)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就更新了数据模型中的两个部分，并且发送了一个新的消息，有了这几个简单的函数（updateModel, addCmd, toCmd）的帮助，代码又变得很好读了，强烈推荐。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ccapndave/elm-update-extra&#34;&gt;https://github.com/ccapndave/elm-update-extra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;友情提示：如果实现上既带进来了旧的 model，又利用了其它的环节，一定注意不要把 model 弄混，如果错误的把旧的值传下去，会导致数据的丢失。&lt;/p&gt;

&lt;h3 id=&#34;子模块的拆分和交互&#34;&gt;子模块的拆分和交互&lt;/h3&gt;

&lt;p&gt;文档中的示例是标准的 Todo 应用，逻辑很简单，并不能完全解决实际应用的需求，个人体会最大的需求是更好的模块化，把不同部分的逻辑互相隔离，经过一些调研，选择了 elm-component-updater 来支持模块化的组织，以及模块之间的交互，效果很满意，强烈推荐。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mpdairy/elm-component-updater&#34;&gt;https://github.com/mpdairy/elm-component-updater&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;友情提示：一定花些时间把里面的示例完全看懂，明白了以后概念是很清晰的，实际使用中也很灵活。&lt;/p&gt;

&lt;p&gt;这个话题有点大，要说清楚得不小的篇幅，只能留到以后了。&lt;/p&gt;

&lt;h3 id=&#34;对微信小程序-api-的封装&#34;&gt;对微信小程序 API 的封装&lt;/h3&gt;

&lt;p&gt;微信提供的是 JavaScript 的接口，虽然文档还不错，但并不能很好的与 Elm 相结合，在熟悉了 Elm 之后，就尝试着做了一个封装，效果很好，可以进行类型检查，也完全是以 Elm 的方式在访问相关的接口。&lt;/p&gt;

&lt;p&gt;这部分目前只实现了用到的几个接口，添加更多的接口实现上都比较简单直接，在成熟的时候会开源出来。&lt;/p&gt;

&lt;h3 id=&#34;和界面部分的结合&#34;&gt;和界面部分的结合&lt;/h3&gt;

&lt;p&gt;由于微信小程序并不提供 Dom 的访问，Elm 中很强大的 Virtual Dom 并不能被用到，目前是在数据模型发生变化时发送更新给 JavaScript 端，再调用 setData()，完成页面渲染。&lt;/p&gt;

&lt;p&gt;理想情况当然是能够实现兼容 Virtual Dom 的方式，不过技术上有一定的难度，目前还没有很好的方案。另一方面目前的模式也还是很清晰的，JavaScript 只负责简单的数据传递，修改请求也是用生成事件的方式回传给 Elm 的，所以虽然不是最优，立刻修改的需求也并不强烈。&lt;/p&gt;

&lt;h3 id=&#34;elm-css-的应用&#34;&gt;elm-css 的应用&lt;/h3&gt;

&lt;p&gt;虽然也做过些网页相关的工作，不过基本上不具备 CSS 的技能，现在是个小团队，也得自己写写，学了语法，写起来还是有 JavaScript 的感觉，没有编译期的检查，往往只能频繁的尝试，偶尔也会因为格式的问题（写错键值、单位等等）产生问题，当时如果没发现，就成了隐患。&lt;/p&gt;

&lt;p&gt;还好有其他人也有同样的感觉，发现了 elm-css 这个用 Elm 写 CSS 的工具，感觉其它的那些 CSS 工具都太弱了，所有的定义都有相应的类型，以及可接受的输入，编译期的检查保证了只能生成有效的 CSS，对于程序员来说是最自然、高效的方式，强烈推荐。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rtfeldman/elm-css&#34;&gt;https://github.com/rtfeldman/elm-css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;javascript-互操作&#34;&gt;JavaScript 互操作&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;port modelOut : JsModel.Type -&amp;gt; Cmd msg
port msgIn : ((String, String, Params) -&amp;gt; msg) -&amp;gt; Sub msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只有两个接口，一个是把最新的数据模型传给 JavaScript，一个是给 Elm 发送消息，其实也就够用了。&lt;/p&gt;

&lt;p&gt;比较麻烦的是这里的 model 只能使用与 JavaScript 兼容的 Elm 数据结构，像是 Union 就不能用，实际应用中是加了一层处理，把完整的 model 做了一次包装，或者裁剪掉可以不用的部分，或是编码成支持的格式，不是太完美，也增加了代码量，好在比较简单直接，不会显著降低代码质量。&lt;/p&gt;

&lt;p&gt;最完美的方案是如果能解决界面部分的 Elm 化，就不需要这两个接口了， 那么相关联的代码也都可以删掉了。&lt;/p&gt;

&lt;h3 id=&#34;令人愉悦的重构&#34;&gt;令人愉悦的重构&lt;/h3&gt;

&lt;p&gt;过程中最让人愉悦的部分大概是代码的演化与重构了，不论是逻辑关系从一对一改为一对多，改变模块的覆盖功能，调整外部请求的流程，往往能比预期更快的完成，确实常常是编译通过，一次运行就通过了，感觉上像是有了很多自动实现的单元测试，重构代码还不用重构测试，每次都感觉选择 Elm 实在是太正确了，否则在 JavaScript 的世界里，不知要花多少时间。&lt;/p&gt;

&lt;h2 id=&#34;过程和思考&#34;&gt;过程和思考&lt;/h2&gt;

&lt;p&gt;编码时往往容易被问题带着走，也常常会发现在用正确的方式解决着错误的问题，尤其是相对反常规的做法，更是会有隐藏的风险。&lt;/p&gt;

&lt;h3 id=&#34;如何作出引入-elm-的选择&#34;&gt;如何作出引入 Elm 的选择&lt;/h3&gt;

&lt;p&gt;之前几年都是以 C# 为主，对于 JavaScript 这样的解释型，动态弱类型语言不是很有兴趣，以前公司的 Python 项目也遇到过不少测试没能覆盖，上线遇到&amp;rdquo;惊喜&amp;rdquo;的先例。&lt;/p&gt;

&lt;p&gt;之前看过 Elm 的材料，没实际做过项目，印象还是挺好的。&lt;/p&gt;

&lt;p&gt;接到任务时的第一反应是照着教程用最简单的方式尽快出个 Demo 就好了，一切都按照官方文档来，尽量不引入外部依赖。实际上手才发现没那么简单，官方没有提到任何对数据的管理方式，纯手写逻辑又太不可控，考虑是否引入 Redux 这样的框架，以前 nodejs 用过的 async 库比较大，引入了一个支持 waterfall 的 weachy，再加一个消息转发的 postal，附带着又带进来 lodash， 这样下来依赖也越来越多，而且还是很重的拼凑的感觉，有入坑的预感。&lt;/p&gt;

&lt;p&gt;于是用了一个周末的时间尝试了 Elm 方案，效果出乎意料的好，依赖全部删掉，重写了部分核心功能，直觉上是个正确的方向，后来搞定了微信接口的封装，又解决了行为串联，和子模块组织的设计之后，开发效率开始上来了，质量上比之前的 JavaScript 版本则是质的提高。&lt;/p&gt;

&lt;h3 id=&#34;前期磨合&#34;&gt;前期磨合&lt;/h3&gt;

&lt;p&gt;全新的语言、架构，产生大量的细节问题，要解决、调研，如果是个纯粹的练手项目，那么有足够的时间，而当前的项目又需要尽早上线，说实话压力是很大的，每天都得加班加点，还好进展一直都有，大概在写到第三、四天以后，体会到了视角的变化，感觉能从函数式的角度来理解系统了，之后就进入了比较顺利的阶段。&lt;/p&gt;

&lt;h3 id=&#34;开发效率与体验&#34;&gt;开发效率与体验&lt;/h3&gt;

&lt;p&gt;这个其实确实不好衡量，例如一个非常熟练的 JavaScript 程序员，仍然很可能可以比我做的更快，去掉前期学习的部分，差距会更大。&lt;/p&gt;

&lt;p&gt;自己的感觉是很不错的，抛掉学习的成本，代码的增长还是很快的，尤其是质量很好，不会带来复杂性失控的问题。&lt;/p&gt;

&lt;p&gt;至于开发体验的话，对我来说是近乎完美的体验，在可预见的将来，我想都不会回到原生 JavaScript 开发的方式上去，而且也必定会更加深入的采用函数式的技术或方式进行开发。&lt;/p&gt;

&lt;h3 id=&#34;潜在风险&#34;&gt;潜在风险？&lt;/h3&gt;

&lt;p&gt;对于这一类编译到 JavaScript 的语言来说，首要的问题是编译器是否稳定可靠，如果不行的化调试难度就太大了，Elm 的编译器本身是用 Haskell 写的，虽然是开源的，我也还没有具体看过，到目前为止还没有碰到过任何这方面的问题。&lt;/p&gt;

&lt;p&gt;Elm 现在的版本是 0.18，并不会保证新版本的完全向后兼容，像是之前 0.17 更新的时候把原本的 JavaScript 互操作方式改了，又把 RFP （Reactive Functional Programming）的部分做了较大的调整，社区里也有些意见，有些包不更新的化，新的版本中也没法用。我看到的是改的结果确实很好，迁移的难度也不大，还是利大于弊的状态。&lt;/p&gt;

&lt;p&gt;剩下的就是小众选择的通病了，难找人，难找资料，信息基本都是英文的。相关的包也少的多，不过另一方面，像 Node.js 或者 Python 这么多的包，要找到合用的也挺难的，做对比也费时费力，往往让人很焦虑。&lt;/p&gt;

&lt;h2 id=&#34;痛点与将来&#34;&gt;痛点与将来&lt;/h2&gt;

&lt;p&gt;上面主要是优点，也还是遗留了一些痛点，篇幅所限，就不展开了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript 互操作的限制&lt;/li&gt;
&lt;li&gt;相似类型的代码重用&lt;/li&gt;
&lt;li&gt;模式化的代码&lt;/li&gt;
&lt;li&gt;完全替代界面端 JavaScript 和 WXML？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;

&lt;h3 id=&#34;术语&#34;&gt;术语&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;英文&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;不可变数据&lt;/td&gt;
&lt;td&gt;Immutable Data&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;函数式语言&lt;/td&gt;
&lt;td&gt;Functional Language&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;强类型&lt;/td&gt;
&lt;td&gt;Strong Type&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;静态类型&lt;/td&gt;
&lt;td&gt;Static Type&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;柯里化&lt;/td&gt;
&lt;td&gt;Currying&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;运行时例外&lt;/td&gt;
&lt;td&gt;Runtime Exception&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;链接&#34;&gt;链接&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elm-lang.org/&#34;&gt;Elm 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96&#34;&gt;柯里化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>游戏开发架构中的数据与元数据</title>
      <link>http://cn.yjpark.org/blog/2015/02/26/data-and-metadata-in-game-development-architect/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://cn.yjpark.org/blog/2015/02/26/data-and-metadata-in-game-development-architect/</guid>
      <description>&lt;p&gt;从 2012年4月开始，一直都在开发一款平板电脑上的实时战略类游戏，开发平台是当下比较流行的 Unity3D，网络传输部分基于 uLink。是我自己的第一个 Unity3D 项目，在架构上下了不少功夫，项目相对比较复杂，作为架构师和主要的开发者（技术团队一共3个人，其他两个经验都比较少），工作量着实不小，开发过程还是相当痛苦的，相对应的收获也很不少。&lt;/p&gt;

&lt;p&gt;目前项目的技术部分基本上算是告一段落，下一步更多的是市场和运营的工作，我的重心也会向服务器管理的部分转移，计划陆续把项目中的心得体会在这里用文字的形式保留一下。&lt;/p&gt;

&lt;h2 id=&#34;数据&#34;&gt;数据&lt;/h2&gt;

&lt;p&gt;其实广义的说，与计算机相关的所有的信息，包括代码，可执行文件，网络数据包，一切的一切都是数据，取决于从什么方向来看，比如说，源代码是编译器的输入数据，相应的可执行文件则是编译器的输出数据；从操作系统的角度来看，可执行文件就变成了输入数据。&lt;/p&gt;

&lt;h2 id=&#34;元数据&#34;&gt;元数据&lt;/h2&gt;

&lt;p&gt;元数据简单的说就是关于数据的数据，听上去可能比较抽象，其实并没有什么特别之处，例如关系式数据库中数据库的模式就是一种典型的元数据，定义了数据表的内容格式，包含哪些列，各自的数据类型及取值的约束，索引的定义等等，表中存储的内容是数据，模式就是数据的数据，也就是元数据。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;数据与元数据的关系&#34;&gt;数据与元数据的关系&lt;/h2&gt;

&lt;p&gt;对于软件系统来说，元数据往往是输入数据的一部分，而数据则是输出数据。元数据会影响系统对待数据的方式，此外元数据和数据往往是一对多的关系。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;这里的输入输出并不是绝对的，比较复杂的系统往往会有多重体现，例如：可能会提供元数据的编辑工具（例如游戏中提供了地图编辑的功能），则对于工具来说，元数据就成了输出数据。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;另外，大部分情况下，数据即是输入也是输出的，例如对文本编辑器来说，对文本文件既会读取，也会写入。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;架构与元数据的关系&#34;&gt;架构与元数据的关系&lt;/h2&gt;

&lt;p&gt;个人体会，架构的核心功能就是对元数据的定义、解析，和执行，只能以一种方式运行的代码不能称之为架构，必然要根据具体的元数据（广义上也包含构建于架构之上的逻辑代码）来执行不同的逻辑规则。&lt;/p&gt;

&lt;p&gt;架构中的元数据并不仅限于类似数据库模式或者页面模板这种具体的形式，也包括比较抽象的形式，例如对于实现类中特定方法的定义等等，像是 Ruby on Rails，或是 Django 这类大量基于惯例的架构就更是大量定义这种抽象类型的元数据，有些甚至可以称之为元数据的元数据。&lt;/p&gt;

&lt;p&gt;领域专属语言，则是这种关系达到最大程度的结果：&lt;code&gt;软件系统 = 架构 + 元数据&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;游戏开发架构中的数据与元数据&#34;&gt;游戏开发架构中的数据与元数据&lt;/h2&gt;

&lt;p&gt;终于进入正题，下面就以我们的游戏中各个兵种的定制系统为例，具体解释一下。&lt;/p&gt;

&lt;p&gt;游戏中玩家只负责划线指挥位置的移动，各个单位的运行逻辑是类似 AI 的方式，会根据当前自身的状态，玩家的命令，周边的环境以及敌军、友军的具体情况产生行动。游戏的可玩性很大程度上来自于各个兵种的设计，例如远程攻击的能力，近战的攻防能力，攻击速度；特殊兵种的独特技能，例如忍者在运动时可以隐身，医生可以恢复周围友军的生命值等等。为了达到更大的多样性，每个单位还可以叠加特殊设定，简单的可能是数值的加成，复杂的则可以提供额外的特殊技能。&lt;/p&gt;

&lt;p&gt;策划提出的要求是能在不需重新编译的情况下调整参数，例如各兵种的移动速度，加成的数值等等，似乎要求不高，也很容易实现。然而游戏开发中的不确定因素其实很大，往往会做大量的修改，如果用常规的方式，逐一实现功能，来来回回的修改恐怕会带来相当大的工作量。&lt;/p&gt;

&lt;p&gt;原型版本中实现的相对简单，自己写了第一个版本，基于行为树的模型，实现了基本的攻击逻辑，后来让另一个程序员接手，加了不少功能，又改了若干次需求，后来复杂性失控了，出现很多问题，经常行为就不对了，最明显的就是敌我双方非常友好的转来转去，就是不动手。&lt;/p&gt;

&lt;p&gt;本想凑合着先改改用着，策划说是不行了，必须彻底修好，而且好多新技能还没加，旧的代码是不可能支持了。最后还是花了近两个月的时间，把这部分彻底重写了一遍，基本上提供了一个小型的领域专属语言。策划通过 Json 的形式，利用系统支持的底层组件，可以自由定义兵种，加入新的技能、装备，效果相当不错。这些 Json 格式的元数据保存在单独的目录中，不需要重新编译的情况下可以自由修改。&lt;/p&gt;

&lt;h2 id=&#34;面向元数据开发的优点&#34;&gt;面向元数据开发的优点&lt;/h2&gt;

&lt;h3 id=&#34;技术与策划分工明确&#34;&gt;技术与策划分工明确&lt;/h3&gt;

&lt;p&gt;最重要的一点就是把各工种的责任划分的比较清晰，技术负责实现架构和各个子模块，策划负责通过提供元数据的方式进行具体的设计与定制。&lt;/p&gt;

&lt;p&gt;通过简单的培训，和基本完整的文档，我们的策划写了上百个 Json 文件，把所有的技能、装备都实现了一遍，有些自定义的技能达到了相当复杂的程度。整个过程中我的角色都是技术支持，前期答疑、做些示例，后期主要是调试，增加一些新的组件。双方都很满意，策划可以自己实现想要的效果，我也可以集中精力在可重用的工作上。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;之前看到过有些项目里修改一个简单的参数都必须由程序员负责，有些“乐于助人”的程序员也没觉得这样的方式有问题。个人认为程序员的工作应该更多的是提供工具，由最适合的角色使用这些工具来产生具体的数据或是元数据。任何简单的重复性工作都是对程序员时间的浪费，需要通过技术的手段解决。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;推动对问题领域的充分理解&#34;&gt;推动对问题领域的充分理解&lt;/h3&gt;

&lt;p&gt;如果你是一名程序员的话，相信对于需求提供方的种种不靠谱行为应该都有些切身体会吧，很多时候其实他们根本就不知道，又需要做出决定才能推进项目开展，于是往往随便想想，就埋下了种种坑。这种时候最怕的是特别天真的程序员，真是让做什么就做什么，让怎么改就怎么改，如果是原型阶段，那就一切都好，否则代码就越来越让人纠结了。&lt;/p&gt;

&lt;p&gt;在项目前期，程序员自身对相关领域不甚了解，策划者同样不会有清晰的目标（做山寨产品自然另当别论）。需求稳定的一个解决方式是提出有效的问题，用元数据的方式看待系统可以帮助我们找到最重要的未知因素，从而得到根本性的问题，在推动策划回答这些问题时，共同把产品变得渐渐清晰。&lt;/p&gt;

&lt;h3 id=&#34;稳定性-灵活性&#34;&gt;稳定性、灵活性&lt;/h3&gt;

&lt;p&gt;如果不能做到比较清晰的模块化，想提供元数据的运行引擎是不可能的。稳定性与灵活性，其实都来自于更好的模块化。&lt;/p&gt;

&lt;p&gt;当然，只有正确的理念决不能保证具体实现的正确和优雅，开发过程中会碰到无数小的决策，如果不是非常认真的对待代码的组织与重用，代码库劣化的速度是很可怕的。&lt;/p&gt;

&lt;h3 id=&#34;易于管理&#34;&gt;易于管理&lt;/h3&gt;

&lt;p&gt;由于元数据和系统本身有着清晰的界限，元数据的管理本质上变成了数据的管理，像是在我们的系统中，对于核心战斗逻辑的调整，在系统提供的空间内只是若干文件的更新而已。&lt;/p&gt;

&lt;h2 id=&#34;面向元数据开发的缺点&#34;&gt;面向元数据开发的缺点&lt;/h2&gt;

&lt;p&gt;世上没有免费的午餐，也没有解决一切问题的银弹，面向元数据开发的方式也存在很多缺点，需要针对具体的场合来判断是否值得。&lt;/p&gt;

&lt;h3 id=&#34;前期准备工作要求比较高&#34;&gt;前期准备工作要求比较高&lt;/h3&gt;

&lt;p&gt;开发的过程比较类似阶段性的，前期出功能会很慢，还经常需要返工式的调整。&lt;/p&gt;

&lt;p&gt;个人的经验是对于第一个功能选择一定会慎重，很可能需要通过几种不同的实现方式提高自己对领域和解决方案的理解，也需要大量的对相关知识的学习。这个阶段不怕慢，也不怕返工，最怕的是暴露不出问题来，大规模上实现才发现架构上的不足。&lt;/p&gt;

&lt;p&gt;在没有得到足够信息之前，都会有一种心里没底的感觉，这时一定要坚持，往往是一段时间过去，写了一定量的代码（其中相当一部分都是被扔掉的），不知不觉就有把握了，感觉清晰的掌握了系统“应该”的实现方式。这时架构基本成型，功能的实现一下子就快起来了。&lt;/p&gt;

&lt;h3 id=&#34;设计与开发过程比较复杂&#34;&gt;设计与开发过程比较复杂&lt;/h3&gt;

&lt;p&gt;设计一个合适的、好用的元数据模型很不容易，合理的实现同样颇有挑战性，对于程序员的要求是相当高的，大多部分又是经验的积累，没有速成的捷径。&lt;/p&gt;

&lt;p&gt;如果团队不具备足够的能力，可能还是简单直接的开发方式更加适合，当然这种情况下，最好能尽量简化产品的技术需求，否则项目开发到了后期，很可能会出现技术搞不定的结果。&lt;/p&gt;

&lt;h3 id=&#34;对策划人员要求比较高&#34;&gt;对策划人员要求比较高&lt;/h3&gt;

&lt;p&gt;提供了工具，策划就不是只动嘴的工作了，必须亲手来应用这些工具才行，如果系统比较复杂的话，还需要使用领域专属语言进行二次开发，这些都对逻辑的要求比较高。&lt;/p&gt;

&lt;h3 id=&#34;调试&#34;&gt;调试&lt;/h3&gt;

&lt;p&gt;抽象层次增加后，一旦出现问题，调试起来会格外复杂。个人经验有下面几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;元数据的校验必不可少，通过很常规的检查就能发现元数据格式上的大部分问题，这样的代码写起来比较无聊，不过价值很大，所以不能偷懒。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;调试基础架构要尽早准备好，我们的系统中会在日志中产生关键的调试信息，开始并没有很完善的工具函数来标准化调试的格式。后期功能复杂后，很不容易使用。最终实现了这些工具，保证所有调试信息的统一，并提供了基于 Unity3D Editor 的过滤功能，调试起来效率得到了数倍的提高。不过早期的代码就没有完全调整了，所以说应该尽早准备好。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;具体的底层模块尽量设计的短小、简单，只完成必不可少的功能。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;避免集中式的控制代码，能通过低耦合方式实现的，尽量避免直接的依赖关系。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;

&lt;h3 id=&#34;基本医疗技能&#34;&gt;基本医疗技能&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;abilities&amp;quot;: [{
        &amp;quot;skills&amp;quot;: [{
            &amp;quot;type&amp;quot;: &amp;quot;repeat_trigger&amp;quot;,
            &amp;quot;interval&amp;quot;: 2.0,
            &amp;quot;kind&amp;quot;: &amp;quot;doctor_heal&amp;quot;

        }],
        &amp;quot;define&amp;quot;: {
            &amp;quot;doctor_heal_amount&amp;quot;: 60,
            &amp;quot;doctor_heal_radius&amp;quot;: 4
        },
        &amp;quot;triggers&amp;quot;: [{
            &amp;quot;type&amp;quot;: &amp;quot;custom&amp;quot;,
            &amp;quot;kind&amp;quot;: &amp;quot;doctor_heal&amp;quot;
        }],
        &amp;quot;targets&amp;quot;: [{
            &amp;quot;type&amp;quot;: &amp;quot;dynamic_sensor&amp;quot;,
            &amp;quot;radius&amp;quot;: &amp;quot;doctor_heal_radius&amp;quot;,
            &amp;quot;side&amp;quot;: &amp;quot;team&amp;quot;
        },{
            &amp;quot;type&amp;quot;: &amp;quot;self&amp;quot;
        },{
            &amp;quot;type&amp;quot;: &amp;quot;wounded&amp;quot;
        }],
            &amp;quot;spells&amp;quot;: [{
                &amp;quot;type&amp;quot;: &amp;quot;heal&amp;quot;,
                &amp;quot;key&amp;quot;: &amp;quot;doctor_heal&amp;quot;,
                &amp;quot;visual_key&amp;quot;: &amp;quot;heal_aura&amp;quot;,
                &amp;quot;amount&amp;quot;: &amp;quot;doctor_heal_amount&amp;quot;
        }]
    }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是系统中一个简单医疗技能的示例，每两秒钟会对周边4个单位距离内受伤的友军回复最多60点的健康值。&lt;/p&gt;

&lt;p&gt;以下几点值得注意：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过 define 的方式，把数值定义为属性，于是可以做进一步的加成或是修改，同一个文件不需修改可以应用在多处&lt;/li&gt;
&lt;li&gt;重复触发是一个模块，可以用在所有需要定时逻辑的地方&lt;/li&gt;
&lt;li&gt;医治逻辑也是一个模块，可以由其他方式触发&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;这个题目比较大，要解释清楚不太容易，很多地方个人的理解也未必就是对的，很可能还有更好的方式。&lt;/p&gt;

&lt;p&gt;具体的在项目开发中设计与应用架构是个极为灵活的过程，没有一定之规，必须根据项目、团队的具体情况才能做出比较合理的选择，我想这也是为什么我们不仅仅把软件开发作为一门技术，而也会作为一门艺术来看待吧。另一种看法是软件开发更接近一门手艺，这也是我个人最有同感的。&lt;/p&gt;

&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;

&lt;h3 id=&#34;术语&#34;&gt;术语&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;数据  Data&lt;/li&gt;
&lt;li&gt;元数据 Metadata&lt;/li&gt;
&lt;li&gt;数据库模式 Database Schema&lt;/li&gt;
&lt;li&gt;架构 Architect&lt;/li&gt;
&lt;li&gt;领域专属语言 DSL - Domain Specific Language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;对于程序员来说，英文是很重要的，可以说是事实上的通用语言，恐怕在可见的未来也不会发生转变，又不想在中文技术文章中夹入大量的英文单词，暂定的方式是对于无法翻译或无需翻译的直接用英文，例如：Unity3D；可以翻译的尽量用中文，有其他翻译或是可能有歧义的在附录中列出；主要的术语则也在附录中列出对照的英文，以方便有兴趣的读者做进一步的研究。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>独立游戏程序员生存指南</title>
      <link>http://cn.yjpark.org/blog/2015/02/23/indie-game-developer-survival-guide/</link>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      <author>yjpark@gmail.com (YJ Park)</author>
      <guid>http://cn.yjpark.org/blog/2015/02/23/indie-game-developer-survival-guide/</guid>
      <description>&lt;h2 id=&#34;缘起&#34;&gt;缘起&lt;/h2&gt;

&lt;p&gt;今年1月的时候，公司协办了一次 Global Game Jam 北京站的活动，说是希望能做个简单的有关游戏开发的介绍，开始没太在意，想着应该是个不太正式的交流，也没怎么准备。结果到了一周前的时候才听说活动规模并不小，至少有100多人会参加，而且我的环节也是更像是演讲类型的。于是多少有些紧张，好久没当众说过话了，开始认真的选题，准备幻灯片。&lt;/p&gt;

&lt;p&gt;自己做游戏也有一段时间了，技术上的（主要是 Unity 3D 相关的），非技术上的，收获和感触也还是挺多的，所以想了想还是选了一个比较宽泛的题目。用了一两天的时间准备了幻灯片，主要是一些觉的有意思或者也许对听众有点用的提纲，具体的内容想了些大概的轮廓，并没有特别清晰的排练过，想着准备的多一点，到时候说到哪里算哪里，不用注意控制时间，简单的多，说的时候压力也会小些。&lt;/p&gt;

&lt;p&gt;活动当天来的人比想象的还多，多少还是有些紧张和兴奋，出乎意料的是除了介绍性的简单内容，准备的要点只说了两张幻灯左右，分配的30分钟时间就没了，准备的最完整的部分基本都没用上。虽然感觉效果还不错（其实从这种活动上，基本上没法真正的学到什么东西，如果能有一些支离的信息能给听众留下印象，或是感到受到了启发的话，对讲者来说就是很难得的了），不过有些意犹未尽的感觉。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;之前也断断续续写过些博客，因为中文水平和打字速度的问题，内容也是技术为主，大部分都是用英文写的，就想着借这个机会，开了个中文的博客，希望能提高提高中文能力。&lt;/p&gt;

&lt;p&gt;英文博客是用 Octopress 2.0 做的，放在 Github 上，评论也是大家都用的 Disqus，国内访问多少都有些问题，中文站就放在  GitCafé 了，评论选了多说。本想升级到 Octopress 3.0，不过因为还没发布，模板什么的都还没完成，简单试了试，大小问题都还有不少，就作罢了。&lt;/p&gt;

&lt;p&gt;下面就先把上次准备的幻灯片放上，具体的内容会在以后的文章里慢慢的加入。&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-01.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-01.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 1&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 1
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-02.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-02.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 2&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 2
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-03.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-03.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 3&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 3
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-04.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-04.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 4&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 4
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-05.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-05.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 5&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 5
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-06.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-06.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 6&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 6
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-07.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-07.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 7&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 7
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-08.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-08.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 8&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 8
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-09.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-09.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 9&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 9
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-10.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-10.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 10&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 10
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-11.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-11.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 11&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 11
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-12.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-12.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 12&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 12
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-13.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-13.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 13&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 13
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-14.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-14.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 14&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 14
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-15.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-15.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 15&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 15
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-16.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-16.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 16&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 16
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-17.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-17.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 17&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 17
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-18.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-18.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 18&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 18
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-19.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-19.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 19&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 19
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-20.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-20.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 20&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 20
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-21.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-21.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 21&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 21
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-22.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-22.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 22&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 22
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-23.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-23.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 23&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 23
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-24.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-24.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 24&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 24
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//full/slides-25.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1333x750&#34;&gt;
      &lt;img src=&#34;http://cn.yjpark.org/slides/2015-02-23-indie-game-developer-survival-guide//thumbnail/slides-25.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Page 25&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Page 25
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;YJ Park&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;div class=&#34;title&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;http://cn.yjpark.org/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://cn.yjpark.org/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://cn.yjpark.org/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://cn.yjpark.org/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://cn.yjpark.org/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery { float: right; }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 80px; }
    .gallery figcaption { display: none; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>